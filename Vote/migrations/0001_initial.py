# Generated by Django 3.0.6 on 2020-10-27 16:05

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Polls',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Type', models.CharField(choices=[('DEPT', 'Departmental Election'), ('FACE', 'Faculty Election'), ('SUG', 'Student Union Government Election')], help_text='Designate whether the election is Departmental, Faculty or Sug Election', max_length=4, verbose_name='Type')),
                ('Category', models.CharField(blank=True, help_text='Designate which department or faculty. If SUG leave blank', max_length=150, verbose_name='Dept/Faculty')),
                ('Award', models.CharField(max_length=100, verbose_name='Position')),
                ('pub_date', models.DateField(auto_now=True, verbose_name='Date')),
                ('deadline', models.DateTimeField(verbose_name='Deadline')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('Matric', models.CharField(max_length=20, verbose_name='Matric No.')),
                ('Other_Name', models.CharField(max_length=30)),
                ('email', models.EmailField(max_length=254)),
                ('Faculty', models.CharField(max_length=50)),
                ('Dept', models.CharField(max_length=50, verbose_name='Department')),
                ('Tel', models.CharField(max_length=11)),
                ('is_voter', models.BooleanField(default=False)),
                ('count', models.IntegerField(default=0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='VOTED',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Voted', models.BooleanField(default=False)),
                ('has_voted', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='voting', to='Vote.Polls')),
                ('user_voted', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_voted', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Choice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('candidates', models.CharField(max_length=200)),
                ('image', models.ImageField(blank=True, upload_to='image/')),
                ('bio', models.TextField(blank=True, max_length=100)),
                ('votes', models.IntegerField(default=0)),
                ('polls', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Vote.Polls')),
            ],
        ),
    ]
